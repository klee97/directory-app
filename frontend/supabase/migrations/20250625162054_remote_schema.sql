create extension if not exists "postgis" with schema "public" version '3.3.7';

create sequence "public"."hmau_vendor_seq";

create sequence "public"."usmetro_gid_seq";

create sequence "public"."usmetro_regions_id_seq";

create sequence "public"."usstates_gid_seq";

create sequence "public"."vendor_seq";

create table "public"."feedback" (
    "id" uuid not null default gen_random_uuid(),
    "rating" integer,
    "comment" text,
    "created_at" timestamp without time zone default now()
);


alter table "public"."feedback" enable row level security;

create table "public"."location_slugs" (
    "slug" text not null,
    "city" text,
    "state" text,
    "country" text,
    "vendor_count" integer not null default 0,
    "lat" double precision,
    "lon" double precision,
    "type" text generated always as (
CASE
    WHEN (city IS NOT NULL) THEN 'city'::text
    WHEN (state IS NOT NULL) THEN 'state'::text
    ELSE 'country'::text
END) stored
);


alter table "public"."location_slugs" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "role" text not null default 'user'::text,
    "created_at" timestamp with time zone default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone default timezone('utc'::text, now()),
    "is_admin" boolean default false
);


alter table "public"."profiles" enable row level security;

create table "public"."regions" (
    "id" integer not null default nextval('usmetro_regions_id_seq'::regclass),
    "name" text,
    "geom" geometry(MultiPolygon,4326)
);


alter table "public"."regions" enable row level security;

create table "public"."tags" (
    "id" uuid not null default gen_random_uuid(),
    "name" text not null,
    "is_visible" boolean default false,
    "created_at" timestamp without time zone default now(),
    "display_name" text,
    "style" text
);


alter table "public"."tags" enable row level security;

create table "public"."user_favorites" (
    "id" bigint generated by default as identity not null,
    "inserted_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "vendor_id" text not null,
    "user_id" uuid not null,
    "is_favorited" boolean not null default true
);


alter table "public"."user_favorites" enable row level security;

create table "public"."usmetro" (
    "gid" integer not null default nextval('usmetro_gid_seq'::regclass),
    "csafp" character varying(3),
    "cbsafp" character varying(5),
    "metdivfp" character varying(5),
    "geoidfq" character varying(19),
    "geoid" character varying(10),
    "name" character varying(100),
    "namelsad" character varying(100),
    "lsad" character varying(2),
    "aland" double precision,
    "awater" double precision,
    "geom" geometry(MultiPolygon,4326),
    "display_name" text
);


alter table "public"."usmetro" enable row level security;

create table "public"."usstates" (
    "gid" integer not null default nextval('usstates_gid_seq'::regclass),
    "statefp" character varying(2),
    "statens" character varying(8),
    "geoidfq" character varying(11),
    "geoid" character varying(2),
    "stusps" character varying(2),
    "name" character varying(100),
    "lsad" character varying(2),
    "aland" double precision,
    "awater" double precision,
    "geom" geometry(MultiPolygon,4326)
);


alter table "public"."usstates" enable row level security;

create table "public"."vendor_recommendations" (
    "id" uuid not null default gen_random_uuid(),
    "vendor_id" text,
    "business_name" text not null,
    "website" text,
    "region" text not null,
    "ig_handle" text,
    "recommended_by" text,
    "notes" text,
    "status" text default 'pending'::text,
    "created_at" timestamp without time zone default now()
);


alter table "public"."vendor_recommendations" enable row level security;

create table "public"."vendor_tags" (
    "vendor_id" text not null,
    "tag_id" uuid not null,
    "created_at" timestamp without time zone default now()
);


alter table "public"."vendor_tags" enable row level security;

create table "public"."vendor_testimonials" (
    "id" bigint generated by default as identity not null,
    "inserted_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "vendor_id" text not null,
    "author" text,
    "review" text
);


alter table "public"."vendor_testimonials" enable row level security;

create table "public"."vendors" (
    "business_name" text,
    "bridal_hair_&_makeup_price" integer,
    "bridal_hair_price" integer,
    "bridal_makeup_price" integer,
    "bridesmaid_hair_&_makeup_price" integer,
    "bridesmaid_hair_price" integer,
    "bridesmaid_makeup_price" integer,
    "cover_image" text,
    "email" text,
    "google_maps_place" text,
    "id" text not null default generate_vendor_id(),
    "ig_handle" text,
    "lists_prices" boolean,
    "location_coordinates" text,
    "logo" text,
    "region" text,
    "specialization" text,
    "travels_world_wide" boolean,
    "website" text,
    "city" text,
    "state" text,
    "country" text,
    "slug" text,
    "gis" geometry,
    "state_id" integer,
    "metro_id" integer,
    "metro_region_id" integer,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text)
);


alter table "public"."vendors" enable row level security;

create table "public"."vendors_test" (
    "business_name" text,
    "bridal_hair_&_makeup_price" integer,
    "bridal_hair_price" integer,
    "bridal_makeup_price" integer,
    "bridesmaid_hair_&_makeup_price" integer,
    "bridesmaid_hair_price" integer,
    "bridesmaid_makeup_price" integer,
    "cover_image" text,
    "email" text,
    "google_maps_place" text,
    "id" text not null default generate_vendor_id(),
    "ig_handle" text,
    "lists_prices" boolean,
    "location_coordinates" text,
    "logo" text,
    "region" text,
    "specialization" text,
    "travels_world_wide" boolean,
    "website" text,
    "city" text,
    "state" text,
    "country" text,
    "slug" text,
    "gis" geometry,
    "state_id" integer,
    "metro_id" integer,
    "metro_region_id" integer
);


alter table "public"."vendors_test" enable row level security;

alter sequence "public"."usmetro_gid_seq" owned by "public"."usmetro"."gid";

alter sequence "public"."usmetro_regions_id_seq" owned by "public"."regions"."id";

alter sequence "public"."usstates_gid_seq" owned by "public"."usstates"."gid";

CREATE UNIQUE INDEX feedback_pkey ON public.feedback USING btree (id);

CREATE UNIQUE INDEX location_slugs_pkey ON public.location_slugs USING btree (slug);

CREATE INDEX metro_geom_idx ON public.usmetro USING gist (geom);

CREATE INDEX metro_regions_geom_idx ON public.regions USING gist (geom);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE INDEX states_geom_idx ON public.usstates USING gist (geom);

CREATE UNIQUE INDEX tags_display_name_key ON public.tags USING btree (display_name);

CREATE UNIQUE INDEX tags_name_key ON public.tags USING btree (name);

CREATE UNIQUE INDEX tags_pkey ON public.tags USING btree (id);

CREATE UNIQUE INDEX user_favorites_pkey ON public.user_favorites USING btree (id);

CREATE INDEX user_favorites_user_id_idx ON public.user_favorites USING btree (user_id, is_favorited);

CREATE UNIQUE INDEX user_favorites_user_vendor_unique_idx ON public.user_favorites USING btree (user_id, vendor_id);

CREATE INDEX usmetro_geom_idx ON public.usmetro USING gist (geom);

CREATE UNIQUE INDEX usmetro_pkey ON public.usmetro USING btree (gid);

CREATE UNIQUE INDEX usmetro_regions_pkey ON public.regions USING btree (id);

CREATE INDEX usstates_geom_idx ON public.usstates USING gist (geom);

CREATE UNIQUE INDEX usstates_pkey ON public.usstates USING btree (gid);

CREATE INDEX vendor_geom_idx ON public.vendors USING gist (gis);

CREATE UNIQUE INDEX vendor_recommendations_pkey ON public.vendor_recommendations USING btree (id);

CREATE UNIQUE INDEX vendor_tags_pkey ON public.vendor_tags USING btree (vendor_id, tag_id);

CREATE UNIQUE INDEX vendor_testimonials_pkey ON public.vendor_testimonials USING btree (id);

CREATE INDEX vendor_testimonials_vendor_id_idx ON public.vendor_testimonials USING btree (vendor_id);

CREATE INDEX vendors_gis_idx ON public.vendors USING gist (gis);

CREATE UNIQUE INDEX vendors_id_key ON public.vendors USING btree (id);

CREATE UNIQUE INDEX vendors_pkey ON public.vendors USING btree (id);

CREATE UNIQUE INDEX vendors_slug_key ON public.vendors USING btree (slug);

CREATE INDEX vendors_state_ci_idx ON public.vendors USING btree (lower(state));

CREATE INDEX vendors_state_idx ON public.vendors USING btree (state);

CREATE INDEX vendors_test_gis_idx ON public.vendors_test USING gist (gis);

CREATE INDEX vendors_test_gis_idx1 ON public.vendors_test USING gist (gis);

CREATE UNIQUE INDEX vendors_test_id_key ON public.vendors_test USING btree (id);

CREATE UNIQUE INDEX vendors_test_pkey ON public.vendors_test USING btree (id);

CREATE UNIQUE INDEX vendors_test_slug_key ON public.vendors_test USING btree (slug);

alter table "public"."feedback" add constraint "feedback_pkey" PRIMARY KEY using index "feedback_pkey";

alter table "public"."location_slugs" add constraint "location_slugs_pkey" PRIMARY KEY using index "location_slugs_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."regions" add constraint "usmetro_regions_pkey" PRIMARY KEY using index "usmetro_regions_pkey";

alter table "public"."tags" add constraint "tags_pkey" PRIMARY KEY using index "tags_pkey";

alter table "public"."user_favorites" add constraint "user_favorites_pkey" PRIMARY KEY using index "user_favorites_pkey";

alter table "public"."usmetro" add constraint "usmetro_pkey" PRIMARY KEY using index "usmetro_pkey";

alter table "public"."usstates" add constraint "usstates_pkey" PRIMARY KEY using index "usstates_pkey";

alter table "public"."vendor_recommendations" add constraint "vendor_recommendations_pkey" PRIMARY KEY using index "vendor_recommendations_pkey";

alter table "public"."vendor_tags" add constraint "vendor_tags_pkey" PRIMARY KEY using index "vendor_tags_pkey";

alter table "public"."vendor_testimonials" add constraint "vendor_testimonials_pkey" PRIMARY KEY using index "vendor_testimonials_pkey";

alter table "public"."vendors" add constraint "vendors_pkey" PRIMARY KEY using index "vendors_pkey";

alter table "public"."vendors_test" add constraint "vendors_test_pkey" PRIMARY KEY using index "vendors_test_pkey";

alter table "public"."feedback" add constraint "feedback_rating_check" CHECK (((rating >= 1) AND (rating <= 3))) not valid;

alter table "public"."feedback" validate constraint "feedback_rating_check";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."profiles" add constraint "profiles_role_check" CHECK ((role = ANY (ARRAY['user'::text, 'admin'::text]))) not valid;

alter table "public"."profiles" validate constraint "profiles_role_check";

alter table "public"."tags" add constraint "tags_display_name_key" UNIQUE using index "tags_display_name_key";

alter table "public"."tags" add constraint "tags_name_key" UNIQUE using index "tags_name_key";

alter table "public"."user_favorites" add constraint "user_favorites_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."user_favorites" validate constraint "user_favorites_user_id_fkey";

alter table "public"."user_favorites" add constraint "user_favorites_vendor_id_fkey" FOREIGN KEY (vendor_id) REFERENCES vendors(id) ON UPDATE CASCADE not valid;

alter table "public"."user_favorites" validate constraint "user_favorites_vendor_id_fkey";

alter table "public"."vendor_recommendations" add constraint "vendor_recommendations_status_check" CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text]))) not valid;

alter table "public"."vendor_recommendations" validate constraint "vendor_recommendations_status_check";

alter table "public"."vendor_recommendations" add constraint "vendor_recommendations_vendor_id_fkey" FOREIGN KEY (vendor_id) REFERENCES vendors(id) ON DELETE SET NULL not valid;

alter table "public"."vendor_recommendations" validate constraint "vendor_recommendations_vendor_id_fkey";

alter table "public"."vendor_tags" add constraint "vendor_tags_tag_id_fkey" FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE SET NULL not valid;

alter table "public"."vendor_tags" validate constraint "vendor_tags_tag_id_fkey";

alter table "public"."vendor_tags" add constraint "vendor_tags_vendor_id_fkey" FOREIGN KEY (vendor_id) REFERENCES vendors(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."vendor_tags" validate constraint "vendor_tags_vendor_id_fkey";

alter table "public"."vendor_testimonials" add constraint "vendor_testimonials_vendor_id_fkey" FOREIGN KEY (vendor_id) REFERENCES vendors(id) ON UPDATE CASCADE not valid;

alter table "public"."vendor_testimonials" validate constraint "vendor_testimonials_vendor_id_fkey";

alter table "public"."vendors" add constraint "fk_vendors_metro_region" FOREIGN KEY (metro_region_id) REFERENCES regions(id) ON DELETE SET NULL not valid;

alter table "public"."vendors" validate constraint "fk_vendors_metro_region";

alter table "public"."vendors" add constraint "vendors_id_key" UNIQUE using index "vendors_id_key";

alter table "public"."vendors" add constraint "vendors_metro_id_fkey" FOREIGN KEY (metro_id) REFERENCES usmetro(gid) not valid;

alter table "public"."vendors" validate constraint "vendors_metro_id_fkey";

alter table "public"."vendors" add constraint "vendors_slug_key" UNIQUE using index "vendors_slug_key";

alter table "public"."vendors" add constraint "vendors_state_id_fkey" FOREIGN KEY (state_id) REFERENCES usstates(gid) not valid;

alter table "public"."vendors" validate constraint "vendors_state_id_fkey";

alter table "public"."vendors_test" add constraint "vendors_test_id_key" UNIQUE using index "vendors_test_id_key";

alter table "public"."vendors_test" add constraint "vendors_test_metro_id_fkey" FOREIGN KEY (metro_id) REFERENCES usmetro(gid) not valid;

alter table "public"."vendors_test" validate constraint "vendors_test_metro_id_fkey";

alter table "public"."vendors_test" add constraint "vendors_test_metro_region_id_fkey" FOREIGN KEY (metro_region_id) REFERENCES regions(id) ON DELETE SET NULL not valid;

alter table "public"."vendors_test" validate constraint "vendors_test_metro_region_id_fkey";

alter table "public"."vendors_test" add constraint "vendors_test_slug_key" UNIQUE using index "vendors_test_slug_key";

alter table "public"."vendors_test" add constraint "vendors_test_state_id_fkey" FOREIGN KEY (state_id) REFERENCES usstates(gid) not valid;

alter table "public"."vendors_test" validate constraint "vendors_test_state_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.delete_user()
 RETURNS void
 LANGUAGE sql
 SECURITY DEFINER
AS $function$
	--delete from public.profiles where id = auth.uid();
	delete from auth.users where id = auth.uid();
$function$
;

CREATE OR REPLACE FUNCTION public.generate_vendor_id()
 RETURNS text
 LANGUAGE plpgsql
AS $function$DECLARE
    next_id INT;
BEGIN
    next_id := nextval('vendor_seq');
    RETURN 'HMUA-' || next_id;
END;$function$
;

create type "public"."geometry_dump" as ("path" integer[], "geom" geometry);

CREATE OR REPLACE FUNCTION public.get_active_locations(min_vendor_count integer DEFAULT 1)
 RETURNS TABLE(city text, state text, country text, state_id integer, metro_id integer, metro_region_id integer, lat double precision, lon double precision, vendor_count bigint)
 LANGUAGE plpgsql
AS $function$
BEGIN
  RETURN QUERY
  SELECT 
    v.city,
    v.state,
    v.country,
    (ARRAY_AGG(v.state_id))[1] as state_id,
    (ARRAY_AGG(v.metro_id))[1] as metro_id,
    (ARRAY_AGG(v.metro_region_id))[1] as metro_region_id,
    AVG(ST_Y(v.gis::geometry)) as lat,
    AVG(ST_X(v.gis::geometry)) as lon,
    COUNT(*) as vendor_count
  FROM vendors v
  WHERE v.city IS NOT NULL 
    AND v.state IS NOT NULL 
    AND v.country IS NOT NULL
    AND v.gis IS NOT NULL
  GROUP BY v.city, v.state, v.country  -- Removed gis and IDs from GROUP BY
  HAVING COUNT(*) >= min_vendor_count
  ORDER BY vendor_count DESC, v.state, v.city;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_vendors_by_distance(lat double precision, lon double precision, radius_miles double precision, limit_results integer)
 RETURNS TABLE(business_name text, bridal_hair_price integer, bridal_makeup_price integer, cover_image text, id text, lists_prices boolean, location_coordinates text, region text, specialization text, travels_world_wide boolean, city text, state text, country text, slug text, gis geometry, state_id integer, metro_id integer, metro_region_id integer, distance_miles double precision)
 LANGUAGE sql
AS $function$
  select 
    v.business_name,
    v.bridal_hair_price,
    v.bridal_makeup_price,
    v.cover_image,
    v.id,
    v.lists_prices,
    v.location_coordinates,
    v.region,
    v.specialization,
    v.travels_world_wide,
    v.city,
    v.state,
    v.country,
    v.slug,
    v.gis,
    v.state_id,
    v.metro_id,
    v.metro_region_id,
    ST_Distance(
      v.gis::geography,
      ST_SetSRID(ST_MakePoint(lon, lat), 4326)::geography
    ) * 0.000621371 as distance_miles
  from vendors v
  where ST_DWithin(
    v.gis::geography,
    ST_SetSRID(ST_MakePoint(lon, lat), 4326)::geography,
    radius_miles * 1609.34
  )
  order by distance_miles
  limit limit_results;
$function$
;

CREATE OR REPLACE FUNCTION public.get_vendors_by_location_with_tags(lat double precision, lon double precision, radius_miles double precision, limit_results integer DEFAULT 50)
 RETURNS TABLE(business_name text, bridal_hair_price numeric, bridal_makeup_price numeric, cover_image text, id text, lists_prices boolean, location_coordinates text, region text, specialization text, travels_world_wide boolean, city text, state text, country text, slug text, gis geometry, state_id integer, metro_id integer, metro_region_id integer, distance_miles double precision, tags json)
 LANGUAGE sql
AS $function$
  SELECT 
    v.business_name,
    v.bridal_hair_price,
    v.bridal_makeup_price,
    v.cover_image,
    v.id,
    v.lists_prices,
    v.location_coordinates,
    v.region,
    v.specialization,
    v.travels_world_wide,
    v.city,
    v.state,
    v.country,
    v.slug,
    v.gis,
    v.state_id,
    v.metro_id,
    v.metro_region_id,
    ST_Distance(
      v.gis::geography,
      ST_SetSRID(ST_MakePoint(lon, lat), 4326)::geography
    ) * 0.000621371 as distance_miles,
    -- Aggregate tags into JSON array
    COALESCE(
      json_agg(
        json_build_object(
          'id', t.id,
          'name', t.name,
          'display_name', t.display_name,
          'is_visible', t.is_visible,
          'style', t.style
        )
      ) FILTER (WHERE t.id IS NOT NULL), 
      '[]'::json
    ) as tags
  FROM vendors v
  LEFT JOIN vendor_tags vt ON vt.vendor_id = v.id
  LEFT JOIN tags t ON t.id = vt.tag_id
  WHERE ST_DWithin(
    v.gis::geography,
    ST_SetSRID(ST_MakePoint(lon, lat), 4326)::geography,
    radius_miles * 1609.34
  )
  GROUP BY v.id, v.business_name, v.bridal_hair_price, v.bridal_makeup_price, 
           v.cover_image, v.lists_prices, v.location_coordinates, v.region, 
           v.specialization, v.travels_world_wide, v.city, v.state, v.country, 
           v.slug, v.gis, v.state_id, v.metro_id, v.metro_region_id
  ORDER BY distance_miles
  LIMIT limit_results;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  INSERT INTO public.profiles (id, role)
  VALUES (NEW.id, 'user');
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_profile_updated_at()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_vendor_location(vendor_id text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$BEGIN
  UPDATE vendors v
  SET metro_region_id = (
      SELECT id FROM regions r
      WHERE ST_Contains(r.geom, v.gis)
      LIMIT 1
  ),
  metro_id = (
      SELECT gid FROM usmetro m
      WHERE ST_Contains(m.geom, v.gis)
      LIMIT 1
  ),
  state_id = (
      SELECT gid FROM usstates s
      WHERE ST_Contains(s.geom, v.gis)
      LIMIT 1
  )
  WHERE v.id = vendor_id;
END;$function$
;

create type "public"."valid_detail" as ("valid" boolean, "reason" character varying, "location" geometry);

grant delete on table "public"."feedback" to "anon";

grant insert on table "public"."feedback" to "anon";

grant references on table "public"."feedback" to "anon";

grant select on table "public"."feedback" to "anon";

grant trigger on table "public"."feedback" to "anon";

grant truncate on table "public"."feedback" to "anon";

grant update on table "public"."feedback" to "anon";

grant delete on table "public"."feedback" to "authenticated";

grant insert on table "public"."feedback" to "authenticated";

grant references on table "public"."feedback" to "authenticated";

grant select on table "public"."feedback" to "authenticated";

grant trigger on table "public"."feedback" to "authenticated";

grant truncate on table "public"."feedback" to "authenticated";

grant update on table "public"."feedback" to "authenticated";

grant delete on table "public"."feedback" to "service_role";

grant insert on table "public"."feedback" to "service_role";

grant references on table "public"."feedback" to "service_role";

grant select on table "public"."feedback" to "service_role";

grant trigger on table "public"."feedback" to "service_role";

grant truncate on table "public"."feedback" to "service_role";

grant update on table "public"."feedback" to "service_role";

grant delete on table "public"."location_slugs" to "anon";

grant insert on table "public"."location_slugs" to "anon";

grant references on table "public"."location_slugs" to "anon";

grant select on table "public"."location_slugs" to "anon";

grant trigger on table "public"."location_slugs" to "anon";

grant truncate on table "public"."location_slugs" to "anon";

grant update on table "public"."location_slugs" to "anon";

grant delete on table "public"."location_slugs" to "authenticated";

grant insert on table "public"."location_slugs" to "authenticated";

grant references on table "public"."location_slugs" to "authenticated";

grant select on table "public"."location_slugs" to "authenticated";

grant trigger on table "public"."location_slugs" to "authenticated";

grant truncate on table "public"."location_slugs" to "authenticated";

grant update on table "public"."location_slugs" to "authenticated";

grant delete on table "public"."location_slugs" to "service_role";

grant insert on table "public"."location_slugs" to "service_role";

grant references on table "public"."location_slugs" to "service_role";

grant select on table "public"."location_slugs" to "service_role";

grant trigger on table "public"."location_slugs" to "service_role";

grant truncate on table "public"."location_slugs" to "service_role";

grant update on table "public"."location_slugs" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."regions" to "anon";

grant insert on table "public"."regions" to "anon";

grant references on table "public"."regions" to "anon";

grant select on table "public"."regions" to "anon";

grant trigger on table "public"."regions" to "anon";

grant truncate on table "public"."regions" to "anon";

grant update on table "public"."regions" to "anon";

grant delete on table "public"."regions" to "authenticated";

grant insert on table "public"."regions" to "authenticated";

grant references on table "public"."regions" to "authenticated";

grant select on table "public"."regions" to "authenticated";

grant trigger on table "public"."regions" to "authenticated";

grant truncate on table "public"."regions" to "authenticated";

grant update on table "public"."regions" to "authenticated";

grant delete on table "public"."regions" to "service_role";

grant insert on table "public"."regions" to "service_role";

grant references on table "public"."regions" to "service_role";

grant select on table "public"."regions" to "service_role";

grant trigger on table "public"."regions" to "service_role";

grant truncate on table "public"."regions" to "service_role";

grant update on table "public"."regions" to "service_role";

grant delete on table "public"."spatial_ref_sys" to "anon";

grant insert on table "public"."spatial_ref_sys" to "anon";

grant references on table "public"."spatial_ref_sys" to "anon";

grant select on table "public"."spatial_ref_sys" to "anon";

grant trigger on table "public"."spatial_ref_sys" to "anon";

grant truncate on table "public"."spatial_ref_sys" to "anon";

grant update on table "public"."spatial_ref_sys" to "anon";

grant delete on table "public"."spatial_ref_sys" to "authenticated";

grant insert on table "public"."spatial_ref_sys" to "authenticated";

grant references on table "public"."spatial_ref_sys" to "authenticated";

grant select on table "public"."spatial_ref_sys" to "authenticated";

grant trigger on table "public"."spatial_ref_sys" to "authenticated";

grant truncate on table "public"."spatial_ref_sys" to "authenticated";

grant update on table "public"."spatial_ref_sys" to "authenticated";

grant delete on table "public"."spatial_ref_sys" to "postgres";

grant insert on table "public"."spatial_ref_sys" to "postgres";

grant references on table "public"."spatial_ref_sys" to "postgres";

grant select on table "public"."spatial_ref_sys" to "postgres";

grant trigger on table "public"."spatial_ref_sys" to "postgres";

grant truncate on table "public"."spatial_ref_sys" to "postgres";

grant update on table "public"."spatial_ref_sys" to "postgres";

grant delete on table "public"."spatial_ref_sys" to "service_role";

grant insert on table "public"."spatial_ref_sys" to "service_role";

grant references on table "public"."spatial_ref_sys" to "service_role";

grant select on table "public"."spatial_ref_sys" to "service_role";

grant trigger on table "public"."spatial_ref_sys" to "service_role";

grant truncate on table "public"."spatial_ref_sys" to "service_role";

grant update on table "public"."spatial_ref_sys" to "service_role";

grant delete on table "public"."tags" to "anon";

grant insert on table "public"."tags" to "anon";

grant references on table "public"."tags" to "anon";

grant select on table "public"."tags" to "anon";

grant trigger on table "public"."tags" to "anon";

grant truncate on table "public"."tags" to "anon";

grant update on table "public"."tags" to "anon";

grant delete on table "public"."tags" to "authenticated";

grant insert on table "public"."tags" to "authenticated";

grant references on table "public"."tags" to "authenticated";

grant select on table "public"."tags" to "authenticated";

grant trigger on table "public"."tags" to "authenticated";

grant truncate on table "public"."tags" to "authenticated";

grant update on table "public"."tags" to "authenticated";

grant delete on table "public"."tags" to "service_role";

grant insert on table "public"."tags" to "service_role";

grant references on table "public"."tags" to "service_role";

grant select on table "public"."tags" to "service_role";

grant trigger on table "public"."tags" to "service_role";

grant truncate on table "public"."tags" to "service_role";

grant update on table "public"."tags" to "service_role";

grant delete on table "public"."user_favorites" to "anon";

grant insert on table "public"."user_favorites" to "anon";

grant references on table "public"."user_favorites" to "anon";

grant select on table "public"."user_favorites" to "anon";

grant trigger on table "public"."user_favorites" to "anon";

grant truncate on table "public"."user_favorites" to "anon";

grant update on table "public"."user_favorites" to "anon";

grant delete on table "public"."user_favorites" to "authenticated";

grant insert on table "public"."user_favorites" to "authenticated";

grant references on table "public"."user_favorites" to "authenticated";

grant select on table "public"."user_favorites" to "authenticated";

grant trigger on table "public"."user_favorites" to "authenticated";

grant truncate on table "public"."user_favorites" to "authenticated";

grant update on table "public"."user_favorites" to "authenticated";

grant delete on table "public"."user_favorites" to "service_role";

grant insert on table "public"."user_favorites" to "service_role";

grant references on table "public"."user_favorites" to "service_role";

grant select on table "public"."user_favorites" to "service_role";

grant trigger on table "public"."user_favorites" to "service_role";

grant truncate on table "public"."user_favorites" to "service_role";

grant update on table "public"."user_favorites" to "service_role";

grant delete on table "public"."usmetro" to "anon";

grant insert on table "public"."usmetro" to "anon";

grant references on table "public"."usmetro" to "anon";

grant select on table "public"."usmetro" to "anon";

grant trigger on table "public"."usmetro" to "anon";

grant truncate on table "public"."usmetro" to "anon";

grant update on table "public"."usmetro" to "anon";

grant delete on table "public"."usmetro" to "authenticated";

grant insert on table "public"."usmetro" to "authenticated";

grant references on table "public"."usmetro" to "authenticated";

grant select on table "public"."usmetro" to "authenticated";

grant trigger on table "public"."usmetro" to "authenticated";

grant truncate on table "public"."usmetro" to "authenticated";

grant update on table "public"."usmetro" to "authenticated";

grant delete on table "public"."usmetro" to "service_role";

grant insert on table "public"."usmetro" to "service_role";

grant references on table "public"."usmetro" to "service_role";

grant select on table "public"."usmetro" to "service_role";

grant trigger on table "public"."usmetro" to "service_role";

grant truncate on table "public"."usmetro" to "service_role";

grant update on table "public"."usmetro" to "service_role";

grant delete on table "public"."usstates" to "anon";

grant insert on table "public"."usstates" to "anon";

grant references on table "public"."usstates" to "anon";

grant select on table "public"."usstates" to "anon";

grant trigger on table "public"."usstates" to "anon";

grant truncate on table "public"."usstates" to "anon";

grant update on table "public"."usstates" to "anon";

grant delete on table "public"."usstates" to "authenticated";

grant insert on table "public"."usstates" to "authenticated";

grant references on table "public"."usstates" to "authenticated";

grant select on table "public"."usstates" to "authenticated";

grant trigger on table "public"."usstates" to "authenticated";

grant truncate on table "public"."usstates" to "authenticated";

grant update on table "public"."usstates" to "authenticated";

grant delete on table "public"."usstates" to "service_role";

grant insert on table "public"."usstates" to "service_role";

grant references on table "public"."usstates" to "service_role";

grant select on table "public"."usstates" to "service_role";

grant trigger on table "public"."usstates" to "service_role";

grant truncate on table "public"."usstates" to "service_role";

grant update on table "public"."usstates" to "service_role";

grant delete on table "public"."vendor_recommendations" to "anon";

grant insert on table "public"."vendor_recommendations" to "anon";

grant references on table "public"."vendor_recommendations" to "anon";

grant select on table "public"."vendor_recommendations" to "anon";

grant trigger on table "public"."vendor_recommendations" to "anon";

grant truncate on table "public"."vendor_recommendations" to "anon";

grant update on table "public"."vendor_recommendations" to "anon";

grant delete on table "public"."vendor_recommendations" to "authenticated";

grant insert on table "public"."vendor_recommendations" to "authenticated";

grant references on table "public"."vendor_recommendations" to "authenticated";

grant select on table "public"."vendor_recommendations" to "authenticated";

grant trigger on table "public"."vendor_recommendations" to "authenticated";

grant truncate on table "public"."vendor_recommendations" to "authenticated";

grant update on table "public"."vendor_recommendations" to "authenticated";

grant delete on table "public"."vendor_recommendations" to "service_role";

grant insert on table "public"."vendor_recommendations" to "service_role";

grant references on table "public"."vendor_recommendations" to "service_role";

grant select on table "public"."vendor_recommendations" to "service_role";

grant trigger on table "public"."vendor_recommendations" to "service_role";

grant truncate on table "public"."vendor_recommendations" to "service_role";

grant update on table "public"."vendor_recommendations" to "service_role";

grant delete on table "public"."vendor_tags" to "anon";

grant insert on table "public"."vendor_tags" to "anon";

grant references on table "public"."vendor_tags" to "anon";

grant select on table "public"."vendor_tags" to "anon";

grant trigger on table "public"."vendor_tags" to "anon";

grant truncate on table "public"."vendor_tags" to "anon";

grant update on table "public"."vendor_tags" to "anon";

grant delete on table "public"."vendor_tags" to "authenticated";

grant insert on table "public"."vendor_tags" to "authenticated";

grant references on table "public"."vendor_tags" to "authenticated";

grant select on table "public"."vendor_tags" to "authenticated";

grant trigger on table "public"."vendor_tags" to "authenticated";

grant truncate on table "public"."vendor_tags" to "authenticated";

grant update on table "public"."vendor_tags" to "authenticated";

grant delete on table "public"."vendor_tags" to "service_role";

grant insert on table "public"."vendor_tags" to "service_role";

grant references on table "public"."vendor_tags" to "service_role";

grant select on table "public"."vendor_tags" to "service_role";

grant trigger on table "public"."vendor_tags" to "service_role";

grant truncate on table "public"."vendor_tags" to "service_role";

grant update on table "public"."vendor_tags" to "service_role";

grant delete on table "public"."vendor_testimonials" to "anon";

grant insert on table "public"."vendor_testimonials" to "anon";

grant references on table "public"."vendor_testimonials" to "anon";

grant select on table "public"."vendor_testimonials" to "anon";

grant trigger on table "public"."vendor_testimonials" to "anon";

grant truncate on table "public"."vendor_testimonials" to "anon";

grant update on table "public"."vendor_testimonials" to "anon";

grant delete on table "public"."vendor_testimonials" to "authenticated";

grant insert on table "public"."vendor_testimonials" to "authenticated";

grant references on table "public"."vendor_testimonials" to "authenticated";

grant select on table "public"."vendor_testimonials" to "authenticated";

grant trigger on table "public"."vendor_testimonials" to "authenticated";

grant truncate on table "public"."vendor_testimonials" to "authenticated";

grant update on table "public"."vendor_testimonials" to "authenticated";

grant delete on table "public"."vendor_testimonials" to "service_role";

grant insert on table "public"."vendor_testimonials" to "service_role";

grant references on table "public"."vendor_testimonials" to "service_role";

grant select on table "public"."vendor_testimonials" to "service_role";

grant trigger on table "public"."vendor_testimonials" to "service_role";

grant truncate on table "public"."vendor_testimonials" to "service_role";

grant update on table "public"."vendor_testimonials" to "service_role";

grant delete on table "public"."vendors" to "anon";

grant insert on table "public"."vendors" to "anon";

grant references on table "public"."vendors" to "anon";

grant select on table "public"."vendors" to "anon";

grant trigger on table "public"."vendors" to "anon";

grant truncate on table "public"."vendors" to "anon";

grant update on table "public"."vendors" to "anon";

grant delete on table "public"."vendors" to "authenticated";

grant insert on table "public"."vendors" to "authenticated";

grant references on table "public"."vendors" to "authenticated";

grant select on table "public"."vendors" to "authenticated";

grant trigger on table "public"."vendors" to "authenticated";

grant truncate on table "public"."vendors" to "authenticated";

grant update on table "public"."vendors" to "authenticated";

grant delete on table "public"."vendors" to "service_role";

grant insert on table "public"."vendors" to "service_role";

grant references on table "public"."vendors" to "service_role";

grant select on table "public"."vendors" to "service_role";

grant trigger on table "public"."vendors" to "service_role";

grant truncate on table "public"."vendors" to "service_role";

grant update on table "public"."vendors" to "service_role";

grant delete on table "public"."vendors_test" to "anon";

grant insert on table "public"."vendors_test" to "anon";

grant references on table "public"."vendors_test" to "anon";

grant select on table "public"."vendors_test" to "anon";

grant trigger on table "public"."vendors_test" to "anon";

grant truncate on table "public"."vendors_test" to "anon";

grant update on table "public"."vendors_test" to "anon";

grant delete on table "public"."vendors_test" to "authenticated";

grant insert on table "public"."vendors_test" to "authenticated";

grant references on table "public"."vendors_test" to "authenticated";

grant select on table "public"."vendors_test" to "authenticated";

grant trigger on table "public"."vendors_test" to "authenticated";

grant truncate on table "public"."vendors_test" to "authenticated";

grant update on table "public"."vendors_test" to "authenticated";

grant delete on table "public"."vendors_test" to "service_role";

grant insert on table "public"."vendors_test" to "service_role";

grant references on table "public"."vendors_test" to "service_role";

grant select on table "public"."vendors_test" to "service_role";

grant trigger on table "public"."vendors_test" to "service_role";

grant truncate on table "public"."vendors_test" to "service_role";

grant update on table "public"."vendors_test" to "service_role";

create policy "No public deletes"
on "public"."feedback"
as permissive
for delete
to public
using (true);


create policy "No public updates"
on "public"."feedback"
as permissive
for update
to public
using (false);


create policy "Public insert"
on "public"."feedback"
as permissive
for insert
to public
with check (true);


create policy "Public read"
on "public"."feedback"
as permissive
for select
to public
using (true);


create policy "Allow read access to everyone"
on "public"."location_slugs"
as permissive
for select
to public
using (true);


create policy "Admins can delete profiles"
on "public"."profiles"
as permissive
for delete
to authenticated
using ((is_admin = true));


create policy "Admins can insert profiles"
on "public"."profiles"
as permissive
for insert
to authenticated
with check ((is_admin = true));


create policy "Admins can update profiles"
on "public"."profiles"
as permissive
for update
to authenticated
with check ((is_admin = true));


create policy "Admins can view all profiles"
on "public"."profiles"
as permissive
for select
to authenticated
using ((is_admin = true));


create policy "Users can read own profile"
on "public"."profiles"
as permissive
for select
to authenticated
using ((auth.uid() = id));


create policy "Users can update own profile"
on "public"."profiles"
as permissive
for update
to authenticated
using ((auth.uid() = id));


create policy "No public deletes"
on "public"."regions"
as permissive
for delete
to public
using (false);


create policy "No public inserts"
on "public"."regions"
as permissive
for insert
to public
with check (false);


create policy "No public updates"
on "public"."regions"
as permissive
for update
to public
using (false);


create policy "Public read access"
on "public"."regions"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."tags"
as permissive
for select
to public
using (true);


create policy "No public deletes"
on "public"."tags"
as permissive
for delete
to public
using (false);


create policy "No public inserts"
on "public"."tags"
as permissive
for insert
to public
with check (false);


create policy "No public updates"
on "public"."tags"
as permissive
for update
to public
using (false);


create policy "Users can view/modify own data"
on "public"."user_favorites"
as permissive
for all
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "No public deletes"
on "public"."usmetro"
as permissive
for delete
to public
using (false);


create policy "No public inserts"
on "public"."usmetro"
as permissive
for insert
to public
with check (false);


create policy "No public updates"
on "public"."usmetro"
as permissive
for update
to public
using (false);


create policy "Public read access"
on "public"."usmetro"
as permissive
for select
to public
using (true);


create policy "No public deletes"
on "public"."usstates"
as permissive
for delete
to public
using (false);


create policy "No public inserts"
on "public"."usstates"
as permissive
for insert
to public
with check (false);


create policy "No public updates"
on "public"."usstates"
as permissive
for update
to public
using (false);


create policy "Public read access"
on "public"."usstates"
as permissive
for select
to public
using (true);


create policy "No public deletes"
on "public"."vendor_recommendations"
as permissive
for delete
to public
using (false);


create policy "No public updates"
on "public"."vendor_recommendations"
as permissive
for update
to public
using (false);


create policy "Public insert"
on "public"."vendor_recommendations"
as permissive
for insert
to public
with check (true);


create policy "Public read"
on "public"."vendor_recommendations"
as permissive
for select
to public
using (true);


create policy "Admin can update tags"
on "public"."vendor_tags"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Admins can add tags"
on "public"."vendor_tags"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Enable read access for all users"
on "public"."vendor_tags"
as permissive
for select
to public
using (true);


create policy "No public deletes"
on "public"."vendor_testimonials"
as permissive
for delete
to public
using (false);


create policy "No public inserts"
on "public"."vendor_testimonials"
as permissive
for insert
to public
with check (false);


create policy "No public updates"
on "public"."vendor_testimonials"
as permissive
for update
to public
using (false);


create policy "Public read access"
on "public"."vendor_testimonials"
as permissive
for select
to public
using (true);


create policy "Admin access"
on "public"."vendors"
as permissive
for all
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))))
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Admins can create vendors"
on "public"."vendors"
as permissive
for insert
to public
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Admins can delete vendors"
on "public"."vendors"
as permissive
for delete
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Admins can update vendors"
on "public"."vendors"
as permissive
for update
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))))
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Admins can view vendors"
on "public"."vendors"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "No public deletes"
on "public"."vendors"
as permissive
for delete
to public
using (false);


create policy "No public inserts"
on "public"."vendors"
as permissive
for insert
to public
with check (false);


create policy "No public updates"
on "public"."vendors"
as permissive
for update
to public
using (false);


create policy "Public read access"
on "public"."vendors"
as permissive
for select
to public
using (true);


create policy "Admin access"
on "public"."vendors_test"
as permissive
for all
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))))
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Admins can create vendors"
on "public"."vendors_test"
as permissive
for insert
to public
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Admins can delete vendors"
on "public"."vendors_test"
as permissive
for delete
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Admins can update vendors"
on "public"."vendors_test"
as permissive
for update
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))))
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


create policy "Admins can view vendors"
on "public"."vendors_test"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.id = auth.uid()) AND (profiles.is_admin = true)))));


CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON public.profiles FOR EACH ROW EXECUTE FUNCTION update_profile_updated_at();


